//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PCJack.ConnectionService.SystemControlReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SystemControlReference.ISystemService")]
    public interface ISystemService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISystemService/CheckConnection", ReplyAction="http://tempuri.org/ISystemService/CheckConnectionResponse")]
        System.IAsyncResult BeginCheckConnection(System.AsyncCallback callback, object asyncState);
        
        string EndCheckConnection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISystemService/ChangeVolume", ReplyAction="http://tempuri.org/ISystemService/ChangeVolumeResponse")]
        System.IAsyncResult BeginChangeVolume(double ChangeValue, System.AsyncCallback callback, object asyncState);
        
        void EndChangeVolume(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISystemService/GetVolume", ReplyAction="http://tempuri.org/ISystemService/GetVolumeResponse")]
        System.IAsyncResult BeginGetVolume(System.AsyncCallback callback, object asyncState);
        
        double EndGetVolume(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISystemService/Mute", ReplyAction="http://tempuri.org/ISystemService/MuteResponse")]
        System.IAsyncResult BeginMute(System.AsyncCallback callback, object asyncState);
        
        void EndMute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISystemService/ShutDown", ReplyAction="http://tempuri.org/ISystemService/ShutDownResponse")]
        System.IAsyncResult BeginShutDown(System.AsyncCallback callback, object asyncState);
        
        void EndShutDown(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISystemServiceChannel : PCJack.ConnectionService.SystemControlReference.ISystemService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVolumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVolumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SystemServiceClient : System.ServiceModel.ClientBase<PCJack.ConnectionService.SystemControlReference.ISystemService>, PCJack.ConnectionService.SystemControlReference.ISystemService {
        
        private BeginOperationDelegate onBeginCheckConnectionDelegate;
        
        private EndOperationDelegate onEndCheckConnectionDelegate;
        
        private System.Threading.SendOrPostCallback onCheckConnectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeVolumeDelegate;
        
        private EndOperationDelegate onEndChangeVolumeDelegate;
        
        private System.Threading.SendOrPostCallback onChangeVolumeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVolumeDelegate;
        
        private EndOperationDelegate onEndGetVolumeDelegate;
        
        private System.Threading.SendOrPostCallback onGetVolumeCompletedDelegate;
        
        private BeginOperationDelegate onBeginMuteDelegate;
        
        private EndOperationDelegate onEndMuteDelegate;
        
        private System.Threading.SendOrPostCallback onMuteCompletedDelegate;
        
        private BeginOperationDelegate onBeginShutDownDelegate;
        
        private EndOperationDelegate onEndShutDownDelegate;
        
        private System.Threading.SendOrPostCallback onShutDownCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SystemServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(SystemServiceClient.GetBindingForEndpoint(endpointConfiguration), SystemServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public SystemServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SystemServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public SystemServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SystemServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public SystemServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CheckConnectionCompletedEventArgs> CheckConnectionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChangeVolumeCompleted;
        
        public event System.EventHandler<GetVolumeCompletedEventArgs> GetVolumeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MuteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ShutDownCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PCJack.ConnectionService.SystemControlReference.ISystemService.BeginCheckConnection(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckConnection(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PCJack.ConnectionService.SystemControlReference.ISystemService.EndCheckConnection(System.IAsyncResult result) {
            return base.Channel.EndCheckConnection(result);
        }
        
        private System.IAsyncResult OnBeginCheckConnection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PCJack.ConnectionService.SystemControlReference.ISystemService)(this)).BeginCheckConnection(callback, asyncState);
        }
        
        private object[] OnEndCheckConnection(System.IAsyncResult result) {
            string retVal = ((PCJack.ConnectionService.SystemControlReference.ISystemService)(this)).EndCheckConnection(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckConnectionCompleted(object state) {
            if ((this.CheckConnectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckConnectionCompleted(this, new CheckConnectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckConnectionAsync() {
            this.CheckConnectionAsync(null);
        }
        
        public void CheckConnectionAsync(object userState) {
            if ((this.onBeginCheckConnectionDelegate == null)) {
                this.onBeginCheckConnectionDelegate = new BeginOperationDelegate(this.OnBeginCheckConnection);
            }
            if ((this.onEndCheckConnectionDelegate == null)) {
                this.onEndCheckConnectionDelegate = new EndOperationDelegate(this.OnEndCheckConnection);
            }
            if ((this.onCheckConnectionCompletedDelegate == null)) {
                this.onCheckConnectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckConnectionCompleted);
            }
            base.InvokeAsync(this.onBeginCheckConnectionDelegate, null, this.onEndCheckConnectionDelegate, this.onCheckConnectionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PCJack.ConnectionService.SystemControlReference.ISystemService.BeginChangeVolume(double ChangeValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeVolume(ChangeValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PCJack.ConnectionService.SystemControlReference.ISystemService.EndChangeVolume(System.IAsyncResult result) {
            base.Channel.EndChangeVolume(result);
        }
        
        private System.IAsyncResult OnBeginChangeVolume(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double ChangeValue = ((double)(inValues[0]));
            return ((PCJack.ConnectionService.SystemControlReference.ISystemService)(this)).BeginChangeVolume(ChangeValue, callback, asyncState);
        }
        
        private object[] OnEndChangeVolume(System.IAsyncResult result) {
            ((PCJack.ConnectionService.SystemControlReference.ISystemService)(this)).EndChangeVolume(result);
            return null;
        }
        
        private void OnChangeVolumeCompleted(object state) {
            if ((this.ChangeVolumeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeVolumeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeVolumeAsync(double ChangeValue) {
            this.ChangeVolumeAsync(ChangeValue, null);
        }
        
        public void ChangeVolumeAsync(double ChangeValue, object userState) {
            if ((this.onBeginChangeVolumeDelegate == null)) {
                this.onBeginChangeVolumeDelegate = new BeginOperationDelegate(this.OnBeginChangeVolume);
            }
            if ((this.onEndChangeVolumeDelegate == null)) {
                this.onEndChangeVolumeDelegate = new EndOperationDelegate(this.OnEndChangeVolume);
            }
            if ((this.onChangeVolumeCompletedDelegate == null)) {
                this.onChangeVolumeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeVolumeCompleted);
            }
            base.InvokeAsync(this.onBeginChangeVolumeDelegate, new object[] {
                        ChangeValue}, this.onEndChangeVolumeDelegate, this.onChangeVolumeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PCJack.ConnectionService.SystemControlReference.ISystemService.BeginGetVolume(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVolume(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double PCJack.ConnectionService.SystemControlReference.ISystemService.EndGetVolume(System.IAsyncResult result) {
            return base.Channel.EndGetVolume(result);
        }
        
        private System.IAsyncResult OnBeginGetVolume(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PCJack.ConnectionService.SystemControlReference.ISystemService)(this)).BeginGetVolume(callback, asyncState);
        }
        
        private object[] OnEndGetVolume(System.IAsyncResult result) {
            double retVal = ((PCJack.ConnectionService.SystemControlReference.ISystemService)(this)).EndGetVolume(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVolumeCompleted(object state) {
            if ((this.GetVolumeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVolumeCompleted(this, new GetVolumeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVolumeAsync() {
            this.GetVolumeAsync(null);
        }
        
        public void GetVolumeAsync(object userState) {
            if ((this.onBeginGetVolumeDelegate == null)) {
                this.onBeginGetVolumeDelegate = new BeginOperationDelegate(this.OnBeginGetVolume);
            }
            if ((this.onEndGetVolumeDelegate == null)) {
                this.onEndGetVolumeDelegate = new EndOperationDelegate(this.OnEndGetVolume);
            }
            if ((this.onGetVolumeCompletedDelegate == null)) {
                this.onGetVolumeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVolumeCompleted);
            }
            base.InvokeAsync(this.onBeginGetVolumeDelegate, null, this.onEndGetVolumeDelegate, this.onGetVolumeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PCJack.ConnectionService.SystemControlReference.ISystemService.BeginMute(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMute(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PCJack.ConnectionService.SystemControlReference.ISystemService.EndMute(System.IAsyncResult result) {
            base.Channel.EndMute(result);
        }
        
        private System.IAsyncResult OnBeginMute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PCJack.ConnectionService.SystemControlReference.ISystemService)(this)).BeginMute(callback, asyncState);
        }
        
        private object[] OnEndMute(System.IAsyncResult result) {
            ((PCJack.ConnectionService.SystemControlReference.ISystemService)(this)).EndMute(result);
            return null;
        }
        
        private void OnMuteCompleted(object state) {
            if ((this.MuteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MuteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MuteAsync() {
            this.MuteAsync(null);
        }
        
        public void MuteAsync(object userState) {
            if ((this.onBeginMuteDelegate == null)) {
                this.onBeginMuteDelegate = new BeginOperationDelegate(this.OnBeginMute);
            }
            if ((this.onEndMuteDelegate == null)) {
                this.onEndMuteDelegate = new EndOperationDelegate(this.OnEndMute);
            }
            if ((this.onMuteCompletedDelegate == null)) {
                this.onMuteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMuteCompleted);
            }
            base.InvokeAsync(this.onBeginMuteDelegate, null, this.onEndMuteDelegate, this.onMuteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PCJack.ConnectionService.SystemControlReference.ISystemService.BeginShutDown(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShutDown(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PCJack.ConnectionService.SystemControlReference.ISystemService.EndShutDown(System.IAsyncResult result) {
            base.Channel.EndShutDown(result);
        }
        
        private System.IAsyncResult OnBeginShutDown(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PCJack.ConnectionService.SystemControlReference.ISystemService)(this)).BeginShutDown(callback, asyncState);
        }
        
        private object[] OnEndShutDown(System.IAsyncResult result) {
            ((PCJack.ConnectionService.SystemControlReference.ISystemService)(this)).EndShutDown(result);
            return null;
        }
        
        private void OnShutDownCompleted(object state) {
            if ((this.ShutDownCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShutDownCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShutDownAsync() {
            this.ShutDownAsync(null);
        }
        
        public void ShutDownAsync(object userState) {
            if ((this.onBeginShutDownDelegate == null)) {
                this.onBeginShutDownDelegate = new BeginOperationDelegate(this.OnBeginShutDown);
            }
            if ((this.onEndShutDownDelegate == null)) {
                this.onEndShutDownDelegate = new EndOperationDelegate(this.OnEndShutDown);
            }
            if ((this.onShutDownCompletedDelegate == null)) {
                this.onShutDownCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShutDownCompleted);
            }
            base.InvokeAsync(this.onBeginShutDownDelegate, null, this.onEndShutDownDelegate, this.onShutDownCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PCJack.ConnectionService.SystemControlReference.ISystemService CreateChannel() {
            return new SystemServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISystemService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISystemService1)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISystemService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8082/system/basic");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISystemService1)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8082/192.168.0.27:8082/system/basic");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private class SystemServiceClientChannel : ChannelBase<PCJack.ConnectionService.SystemControlReference.ISystemService>, PCJack.ConnectionService.SystemControlReference.ISystemService {
            
            public SystemServiceClientChannel(System.ServiceModel.ClientBase<PCJack.ConnectionService.SystemControlReference.ISystemService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCheckConnection(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("CheckConnection", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCheckConnection(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CheckConnection", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeVolume(double ChangeValue, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ChangeValue;
                System.IAsyncResult _result = base.BeginInvoke("ChangeVolume", _args, callback, asyncState);
                return _result;
            }
            
            public void EndChangeVolume(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ChangeVolume", _args, result);
            }
            
            public System.IAsyncResult BeginGetVolume(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetVolume", _args, callback, asyncState);
                return _result;
            }
            
            public double EndGetVolume(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("GetVolume", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMute(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Mute", _args, callback, asyncState);
                return _result;
            }
            
            public void EndMute(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Mute", _args, result);
            }
            
            public System.IAsyncResult BeginShutDown(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ShutDown", _args, callback, asyncState);
                return _result;
            }
            
            public void EndShutDown(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ShutDown", _args, result);
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ISystemService,
            
            BasicHttpBinding_ISystemService1,
        }
    }
}
